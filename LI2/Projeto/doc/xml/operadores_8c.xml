<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="operadores_8c" kind="file" language="C++">
    <compoundname>operadores.c</compoundname>
    <includes refid="operadores_8h" local="yes">operadores.h</includes>
    <includes refid="parser_8h" local="yes">parser.h</includes>
    <incdepgraph>
      <node id="9">
        <label>stdarg.h</label>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>operadores.c</label>
        <link refid="operadores_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>operadores.h</label>
        <link refid="operadores_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="7">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isBothLong</definition>
        <argsstring>(elemtype x, elemtype y)</argsstring>
        <name>isBothLong</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se os 2 elementos são do tipo Long. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se os 2 elementos forem do tipo Long, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="15" column="5" bodyfile="operadores.c" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isBothDouble</definition>
        <argsstring>(elemtype x, elemtype y)</argsstring>
        <name>isBothDouble</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se os 2 elementos são do tipo Double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se os 2 elementos forem do tipo Double, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="25" column="5" bodyfile="operadores.c" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isBothString</definition>
        <argsstring>(elemtype x, elemtype y)</argsstring>
        <name>isBothString</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se os dois elementos são do tipo String. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se os dois elementos forem do tipo String, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="35" column="5" bodyfile="operadores.c" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ab7c77a9ab1c5488c65dababa98241055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isBothArray</definition>
        <argsstring>(elemtype x, elemtype y)</argsstring>
        <name>isBothArray</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se os dois elementos são do tipo Array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se os dois elementos forem do tipo Array, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="45" column="5" bodyfile="operadores.c" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isLong</definition>
        <argsstring>(elemtype x)</argsstring>
        <name>isLong</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se um elemento é do tipo Long. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se o elemento for do tipo Long, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="54" column="5" bodyfile="operadores.c" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a8d9511790980cf10613b71acf884ee25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isDouble</definition>
        <argsstring>(elemtype x)</argsstring>
        <name>isDouble</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se um elemento é do tipo Double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se o elemento for do tipo Double, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="63" column="5" bodyfile="operadores.c" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isString</definition>
        <argsstring>(elemtype x)</argsstring>
        <name>isString</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica um elemento é do tipo String. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se o elemento for do tipo String, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="72" column="5" bodyfile="operadores.c" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isArray</definition>
        <argsstring>(elemtype x)</argsstring>
        <name>isArray</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica um elemento é do tipo Array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se o elemento for do tipo Array, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="81" column="5" bodyfile="operadores.c" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a2b19c806ab2b8a56ce87875a4a41b082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isAnyString</definition>
        <argsstring>(elemtype x, elemtype y)</argsstring>
        <name>isAnyString</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se algum dos elementos é do tipo String. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se algum dos elementos for do tipo String, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="91" column="5" bodyfile="operadores.c" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a6379b1e68eb419242670b5d0153a76bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isAnyArray</definition>
        <argsstring>(elemtype x, elemtype y)</argsstring>
        <name>isAnyArray</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que verifica se algum dos elementos é do tipo Array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 se algum dos elementos for do tipo Array, 0 caso contrário. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="101" column="5" bodyfile="operadores.c" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a3771ae9af45733c322719ef939fcf566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soma</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>soma</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o resultado da soma dos 2 elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="110" column="6" bodyfile="operadores.c" bodystart="110" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1af5494c26ebf801486c92be86cfbb95a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void subtracao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>subtracao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o que se obtém ao subtrair o elemento do topo ao elemento a seguir. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="126" column="6" bodyfile="operadores.c" bodystart="126" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1aaf5ce3a099e3a41b4bcedc753d47d8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mult</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>mult</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o resultado da multiplicação dos 2 primeiros elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="142" column="6" bodyfile="operadores.c" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a103b13816055f2f65f846c32605aa129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void divisao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>divisao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o resultado da divisão do 2º elemento do topo pelo elemento do topo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="158" column="6" bodyfile="operadores.c" bodystart="158" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a5d37c34f7318feb0f0d5fb6e4a5a21e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parentesesAberto</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>parentesesAberto</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que decrementa 1 valor ao elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="173" column="6" bodyfile="operadores.c" bodystart="173" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a3da097a9c94248db35377a229205d5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parentesesFechado</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>parentesesFechado</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que incrementa 1 valor ao elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="191" column="6" bodyfile="operadores.c" bodystart="191" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1aff383c03881eb0407ce934e8c33adb1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void exponenciacao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>exponenciacao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> a potência que tem como base o topo da <ref refid="structStack" kindref="compound">Stack</ref> e como expoente o elemento a seguir. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="210" column="6" bodyfile="operadores.c" bodystart="210" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1aed297eef4051bc95a11d1408bde48238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modulo</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>modulo</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca o resto da divisão inteira do 2º elemento pelo 1º elemento do topo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="226" column="6" bodyfile="operadores.c" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a30b9c79458fd1a5c313f48c7c990d2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void conjuncao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>conjuncao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Operador bitwise que retira o topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o valor 1 quando ambos os bits forem 1 e 0 caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para>Exemplo: 2 3 &amp; <verbatim>     2 -&gt; 10

     3 -&gt; 11

     Output -&gt; 10
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="245" column="6" bodyfile="operadores.c" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1af333b0dc11a6563b36673fbd824e1eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disjuncao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>disjuncao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Operador bitwise que retira o topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o valor 1 quando um dos bits for 1 e 0 caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para>Exemplo: 2 4 | <verbatim>     2 -&gt; 010

     4 -&gt; 100

     Output -&gt; 110
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="264" column="6" bodyfile="operadores.c" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ae89906dbcfabf36d7a83df698281b7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xor</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>xor</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Operador bitwise que retira o topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o valor 1 quando os bits comparados forem diferentes e 0 caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="275" column="6" bodyfile="operadores.c" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a452b559406b24eb5e0bad8a7ebb75689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void not</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>not</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Operador bitwise que retira o topo da <ref refid="structStack" kindref="compound">Stack</ref> e colocar na <ref refid="structStack" kindref="compound">Stack</ref> o seu valor representado em Complemento2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="285" column="6" bodyfile="operadores.c" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ad46df72e4a7511723f62f74f5e87e713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arroba</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>arroba</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que troca os três elementos do topo da stack entre si. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>  Exemplos: Input  -&gt; 123

            Output -&gt; 231

            Input  -&gt; 465

            Output -&gt; 654
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="302" column="6" bodyfile="operadores.c" bodystart="302" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ac0c33cc0c6f3d01fc31f246b71651c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void switchtop</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>switchtop</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que troca os dois elementos do topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="318" column="6" bodyfile="operadores.c" bodystart="318" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a142a934e57412a833a6b08fbfbc291ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void underscore</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>underscore</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>O objetivo desta função é duplicar o topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="331" column="6" bodyfile="operadores.c" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ad9fc6c9a04ced2a131b63b0cfb8f707c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tpindex</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>tpindex</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que tem como objetivo procurar ao longo da stack o número de índice &apos;n&apos; e repeti-lo no fim da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="342" column="6" bodyfile="operadores.c" bodystart="342" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a704dcd33553ec31c73e53c0cb55cbf36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void leitura</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>leitura</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que lê uma linha e a coloca no topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="362" column="6" bodyfile="operadores.c" bodystart="362" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ae8be44908928a369e607ca3a1f3dc86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trsint</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>trsint</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que transforma um elemento de qualquer tipo para o tipo long. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="372" column="6" bodyfile="operadores.c" bodystart="372" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a0e1198aa9a9e36ec3db11fcc5971e14c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trsdouble</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>trsdouble</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que transforma um elemento de qualquer tipo para o tipo double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="390" column="6" bodyfile="operadores.c" bodystart="390" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a525f0b257f5ebc946ee663b9ee379967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trschar</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>trschar</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que transforma um elemento de qualquer tipo para o tipo char. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="408" column="6" bodyfile="operadores.c" bodystart="408" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a8f1f8db494502485256e7afe1827b698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void igual</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>igual</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e se forem iguais coloca 1 na stack ou 0 caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="425" column="6" bodyfile="operadores.c" bodystart="425" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a44fca0432c8da0e08c623edd76afa9b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void maior</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>maior</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que devolve 1 se o 2º elemento for maior que o do topo da <ref refid="structStack" kindref="compound">Stack</ref> ou 0, caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="440" column="6" bodyfile="operadores.c" bodystart="440" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a00ba42de048a9f70b31d92dcd28f8594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void menor</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>menor</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que devolve 1 se o 2º elemento for menor que o do topo da <ref refid="structStack" kindref="compound">Stack</ref> ou 0, caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="455" column="6" bodyfile="operadores.c" bodystart="455" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a92b2a6049936bd24c5410fd1a541288d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void invertevl</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>invertevl</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o resultado do seu valor lógico invertido. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="471" column="6" bodyfile="operadores.c" bodystart="471" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a30590305d071041a944db7dc41c64f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double elemDouble</definition>
        <argsstring>(elemtype t, elemdata v)</argsstring>
        <name>elemDouble</name>
        <param>
          <type><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="unionelemdata" kindref="compound">elemdata</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que recebe o tipo e o data de um elemento e devolve o data em Double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Tipo do elemento </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Data do elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valor do elemento no tipo Double. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="483" column="8" bodyfile="operadores.c" bodystart="483" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a56672f95bcd0c9bf1ec45dc942cd7385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void econjuncao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>econjuncao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca o valor do 1º elemento caso ambos sejam verdadeiros ou 0, caso contrário. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="499" column="6" bodyfile="operadores.c" bodystart="499" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a95619495de1c17828bc4da5686fd8fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void edisjuncao</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>edisjuncao</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e: Coloca 0 na <ref refid="structStack" kindref="compound">Stack</ref> se os 2 elementos forem falsos, o 2º elemento caso sejam ambos verdadeiros ou o elemento de valor lógico 1 caso algum deles seja falso. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="515" column="6" bodyfile="operadores.c" bodystart="515" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a57a716b637a8f163767ff908b3d7395e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emaior</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>emaior</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca o elemento maior na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="528" column="6" bodyfile="operadores.c" bodystart="528" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a68bb2456be4665bde8c6216d7416d46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emenor</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>emenor</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca o elemento menor na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="552" column="6" bodyfile="operadores.c" bodystart="552" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1abd2f3cb10e53d365dfed6bb55a84046c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ifthenelse</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>ifthenelse</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 3 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e: Se o 3º elemento do topo for verdadeiro, volta a colocar o 2º elemento na <ref refid="structStack" kindref="compound">Stack</ref>. Caso contrário, volta a colocar o elemento do topo na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="578" column="6" bodyfile="operadores.c" bodystart="578" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a2b52c6822cc7f3f0bdf57e91d8137471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pushvar</definition>
        <argsstring>(struct Stack *s, char var)</argsstring>
        <name>pushvar</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Função que coloca a variável na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Variável </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="603" column="6" bodyfile="operadores.c" bodystart="603" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a919c7e29ea742c20ddfc86e10b57d744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copiatopo</definition>
        <argsstring>(struct Stack *s, char var)</argsstring>
        <name>copiatopo</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Função que altera o valor e o tipo da variável para os do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Variável </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="617" column="6" bodyfile="operadores.c" bodystart="617" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a6b7c0292afd2eebc26df67afb88b57c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(struct Stack *s, char var)</argsstring>
        <name>copy</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Função que altera o valor e o tipo da variável para os do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Variável </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="632" column="6" bodyfile="operadores.c" bodystart="632" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a728e28daeafd78ff8613b7abb0ae85a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void virgula</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>virgula</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> e: Caso seja uma string ou um array, coloca o seu comprimento na <ref refid="structStack" kindref="compound">Stack</ref>; Caso seja um número, coloca na <ref refid="structStack" kindref="compound">Stack</ref> um array inicializado a 0 com todos os inteiros até n, sendo n o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="660" column="6" bodyfile="operadores.c" bodystart="660" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1abf56cca59f9e3f0e1d78d65ac8f1fdb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trsstring</definition>
        <argsstring>(char x, char *s)</argsstring>
        <name>trsstring</name>
        <param>
          <type>char</type>
          <declname>x</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função auxiliar que transforma um char numa String apenas com esse char. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Char </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="694" column="6" bodyfile="operadores.c" bodystart="694" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a3acfb58d6af645eccb73eb44b32ad26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void concat_arrays</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>concat_arrays</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e: Caso sejam os 2 arrays, concatena os arrays; Caso o elemento do topo seja um array, adiciona o 2º elemento da <ref refid="structStack" kindref="compound">Stack</ref> ao início do array e coloca o array resultante na <ref refid="structStack" kindref="compound">Stack</ref>; Caso o 2º elemento do topo seja um array, adiciona o elemento do topo ao fim do array e coloca o array resultante na <ref refid="structStack" kindref="compound">Stack</ref>;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="706" column="6" bodyfile="operadores.c" bodystart="706" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1af7afd6312bc83f0590fcff2a80bf7fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void concat_strings</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>concat_strings</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e: Caso sejam os 2 strings, concatena as strings; Caso o elemento do topo seja uma string, adiciona o 2º elemento da <ref refid="structStack" kindref="compound">Stack</ref> ao início da string e coloca a string resultante na <ref refid="structStack" kindref="compound">Stack</ref>; Caso o 2º elemento do topo seja uma string, adiciona o elemento do topo ao fim da string e coloca a string resultante na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="748" column="6" bodyfile="operadores.c" bodystart="748" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a52f1c920ef9994bddd2f57b7f74ef3d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void concat</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>concat</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que invoca o respetivo concat de strings ou arrays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="774" column="6" bodyfile="operadores.c" bodystart="774" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a17f75f7c1d176990256b2490e927bb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_mais</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_mais</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;+&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o array/string resultante da concatenação.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="785" column="6" bodyfile="operadores.c" bodystart="785" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1aa5bb8725a3146e64903bc1457c759c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void take_last</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>take_last</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> (array/string) e retira-lhe o último elemento (se for array, o do topo) e coloca-o na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="797" column="6" bodyfile="operadores.c" bodystart="797" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a3ddd42dca346ba1a2d95a938767af3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_pFechado</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_pFechado</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;)&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="823" column="6" bodyfile="operadores.c" bodystart="823" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1aa15c3fe091c136802ebf9142d1a869a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void take_fst</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>take_fst</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> (array/string) e retira-lhe o 1º elemento (se for array, o do fundo) o e coloca-o na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="834" column="6" bodyfile="operadores.c" bodystart="834" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ae9e503653973e0ff2a8a5fe204086e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_pAberto</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_pAberto</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;(&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="861" column="6" bodyfile="operadores.c" bodystart="861" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a5bee35b55a8a98e898a1209ec12e24b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void til</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>til</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira da <ref refid="structStack" kindref="compound">Stack</ref> o elemento do topo da <ref refid="structStack" kindref="compound">Stack(Array)</ref> e coloca na <ref refid="structStack" kindref="compound">Stack</ref> todos os seus elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="871" column="6" bodyfile="operadores.c" bodystart="871" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ab1ca19c9cfca13b6154795774515a685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_til</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_til</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;~&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="887" column="6" bodyfile="operadores.c" bodystart="887" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a9b6d42d712bd87e546a4d6443cf6c56a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void procura_substr</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>procura_substr</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 primeiros elementos da <ref refid="structStack" kindref="compound">Stack</ref> (Strings) e coloca na <ref refid="structStack" kindref="compound">Stack</ref> o índice na String (2º elemento do topo) onde se inicia a Substring (elemento do topo) ou -1 caso não exista Substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="902" column="6" bodyfile="operadores.c" bodystart="902" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ad8cfb2a4efd7a48b443d0676cb09457c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_cardinal</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_cardinal</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;#&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="916" column="6" bodyfile="operadores.c" bodystart="916" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a7e512a8653e38e8bf2605865e3388558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lermtlinhas</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>lermtlinhas</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que lê todo o input de uma string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="929" column="6" bodyfile="operadores.c" bodystart="929" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a64c42d9e0f2efda6df0689b2bfe97b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void procura_por_indice</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>procura_por_indice</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref>, onde o do topo é o índice e o 2º um array/string. Procura o elemento do índice dado na string/array e coloca-o na <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="943" column="6" bodyfile="operadores.c" bodystart="943" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ab56dfd4d71f552575a47d3153aee03f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_igual</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_igual</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;=&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="957" column="6" bodyfile="operadores.c" bodystart="957" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a3685206f30bdc1c0bade8be43d4717e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void concat_xvezes</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>concat_xvezes</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> e concatena recursivamente o array/string do 2º elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> n vezes, onde n é o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="971" column="6" bodyfile="operadores.c" bodystart="971" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1aa759f27f5ba1d908b146ea0fc0ac2a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_asterisco</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_asterisco</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;*&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1001" column="6" bodyfile="operadores.c" bodystart="1001" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a6d303d615486f011f9b1e5e191512833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sepstr_substr</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>sepstr_substr</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref> (strings) e, sendo o elemento do topo a substring, separa o 2º elemento do topo (string) por essa substring-. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1013" column="6" bodyfile="operadores.c" bodystart="1013" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a076d88e40e29e20954d90fd3ca48fc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_barra</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_barra</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;/&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1028" column="6" bodyfile="operadores.c" bodystart="1028" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a73991313de0e39d2503779617d9c7b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sepstr_whitespc</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>sepstr_whitespc</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> (string) e separa essa string pela ocorrência de whitespaces. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1039" column="6" bodyfile="operadores.c" bodystart="1039" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1af8ee9f99ed680a12412bf856d8fb1159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sepstr_newlns</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>sepstr_newlns</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira o elemento do topo da <ref refid="structStack" kindref="compound">Stack</ref> (string) e separa essa string pela ocorrência de newlines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1053" column="6" bodyfile="operadores.c" bodystart="1053" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1ac2bc84393637b80e017dbb221e135727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void buscaInicio</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>buscaInicio</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref>, onde n é o elemento do topo e o 2º elemento do topo o array/string, e coloca na <ref refid="structStack" kindref="compound">Stack</ref> os n elementos do início do array/string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1068" column="6" bodyfile="operadores.c" bodystart="1068" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a8ce6283f3d492fd2b5b458c06e8f37b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_menor</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_menor</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;&lt;&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1097" column="6" bodyfile="operadores.c" bodystart="1097" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a201d8d8ca1094bd80b880c4e50385f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void buscaFim</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>buscaFim</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que retira os 2 elementos do topo da <ref refid="structStack" kindref="compound">Stack</ref>, onde n é o elemento do topo e o 2º elemento do topo o array/string, e coloca na <ref refid="structStack" kindref="compound">Stack</ref> os n elementos do fim do array/string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1110" column="6" bodyfile="operadores.c" bodystart="1110" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="operadores_8c_1a0ca13a586172e028c332b8caf9b9aa63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operador_maior</definition>
        <argsstring>(struct Stack *s)</argsstring>
        <name>operador_maior</name>
        <param>
          <type>struct <ref refid="structStack" kindref="compound">Stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função geral do operador &apos;&gt;&apos; que invoca as operações consoante o tipo dos elementos. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structStack" kindref="compound">Stack</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="operadores.c" line="1141" column="6" bodyfile="operadores.c" bodystart="1141" bodyend="1147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ficheiro com as funções relativas aos operadores. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="operadores_8h" kindref="compound">operadores.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8h" kindref="compound">parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" kindref="member">isBothLong</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref><sp/>&amp;&amp;<sp/>y==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" kindref="member">isBothDouble</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref><sp/>&amp;&amp;<sp/>y==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>y){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref><sp/>&amp;&amp;<sp/>y<sp/>==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ab7c77a9ab1c5488c65dababa98241055" kindref="member">isBothArray</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>y){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref><sp/>&amp;&amp;<sp/>y<sp/>==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" kindref="member">isLong</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a8d9511790980cf10613b71acf884ee25" kindref="member">isDouble</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a2b19c806ab2b8a56ce87875a4a41b082" kindref="member">isAnyString</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>y){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref><sp/>||<sp/>y==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a6379b1e68eb419242670b5d0153a76bb" kindref="member">isAnyArray</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>x,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>y){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref><sp/>||<sp/>y==<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3771ae9af45733c322719ef939fcf566" kindref="member">soma</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" kindref="member">isBothLong</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>+<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" kindref="member">isBothDouble</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>+<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a8d9511790980cf10613b71acf884ee25" kindref="member">isDouble</ref>(t_top)<sp/>&amp;&amp;<sp/><ref refid="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" kindref="member">isLong</ref>(t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>+<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>+<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1af5494c26ebf801486c92be86cfbb95a9" kindref="member">subtracao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" kindref="member">isBothLong</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>-<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" kindref="member">isBothDouble</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>-<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a8d9511790980cf10613b71acf884ee25" kindref="member">isDouble</ref>(t_top)<sp/>&amp;&amp;<sp/><ref refid="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" kindref="member">isLong</ref>(t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>-<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>-<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aaf5ce3a099e3a41b4bcedc753d47d8fc" kindref="member">mult</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" kindref="member">isBothLong</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>*<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" kindref="member">isBothDouble</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>*<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a8d9511790980cf10613b71acf884ee25" kindref="member">isDouble</ref>(t_top)<sp/>&amp;&amp;<sp/><ref refid="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" kindref="member">isLong</ref>(t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>*<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>*<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a103b13816055f2f65f846c32605aa129" kindref="member">divisao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" kindref="member">isBothLong</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>/<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" kindref="member">isBothDouble</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>/<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a8d9511790980cf10613b71acf884ee25" kindref="member">isDouble</ref>(t_top)<sp/>&amp;&amp;<sp/><ref refid="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" kindref="member">isLong</ref>(t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>/<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>/<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a5d37c34f7318feb0f0d5fb6e4a5a21e0" kindref="member">parentesesAberto</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_top)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>-<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>-<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>,<sp/>v_top.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref><sp/>-<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3da097a9c94248db35377a229205d5d7" kindref="member">parentesesFechado</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_top)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>:</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>+<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref><sp/>+<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>,<sp/>v_top.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref><sp/>+<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aff383c03881eb0407ce934e8c33adb1c" kindref="member">exponenciacao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a1fd952a5bb720cef346533dcb8c36e33" kindref="member">isBothLong</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>pow((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a75f46d4c7cd93ec76c83c0cd2bf303fe" kindref="member">isBothDouble</ref>(t_top,<sp/>t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>pow(v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a8d9511790980cf10613b71acf884ee25" kindref="member">isDouble</ref>(t_top)<sp/>&amp;&amp;<sp/><ref refid="operadores_8c_1af98d546af0b1a0ce0e5822b8881198ba" kindref="member">isLong</ref>(t_snd))<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>pow((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>,<sp/>v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>pow(v_snd.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>));</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aed297eef4051bc95a11d1408bde48238" kindref="member">modulo</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>%<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a30b9c79458fd1a5c313f48c7c990d2c1" kindref="member">conjuncao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>&amp;<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1af333b0dc11a6563b36673fbd824e1eed" kindref="member">disjuncao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>||<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ae89906dbcfabf36d7a83df698281b7ad" kindref="member">xor</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>^<sp/>v_snd.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a452b559406b24eb5e0bad8a7ebb75689" kindref="member">not</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>~(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>));</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ad46df72e4a7511723f62f74f5e87e713" kindref="member">arroba</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_trd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_trd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_trd,<sp/>v_trd);</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ac0c33cc0c6f3d01fc31f246b71651c6e" kindref="member">switchtop</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a142a934e57412a833a6b08fbfbc291ae" kindref="member">underscore</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/>s-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[s-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>-<sp/>1].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ad9fc6c9a04ced2a131b63b0cfb8f707c" kindref="member">tpindex</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_n<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_n<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_n)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>s-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[(s-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>)<sp/>-<sp/>1<sp/>-<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>s-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[(s-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>)<sp/>-<sp/>1<sp/>-<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>s-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[(s-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>)<sp/>-<sp/>1<sp/>-<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>,<sp/>s-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[(s-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>)<sp/>-<sp/>1<sp/>-<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a704dcd33553ec31c73e53c0cb55cbf36" kindref="member">leitura</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(10000<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//aloca<sp/>mem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(scanf(</highlight><highlight class="stringliteral">&quot;\n%100[^\n]&quot;</highlight><highlight class="normal">,<sp/>x)<sp/>==<sp/>1);<sp/></highlight><highlight class="comment">//lê<sp/>só<sp/>uma<sp/>linha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>x);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ae8be44908928a369e607ca3a1f3dc86a" kindref="member">trsint</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_n<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_n<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_n)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>v_n.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>atoi(v_n.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>v_n.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a0e1198aa9a9e36ec3db11fcc5971e14c" kindref="member">trsdouble</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_n<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_n<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_n)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>:</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>atof(v_n.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>v_n.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a525f0b257f5ebc946ee663b9ee379967" kindref="member">trschar</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_n<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_n<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_n)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>:</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>v_n.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>v_n.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a8f1f8db494502485256e7afe1827b698" kindref="member">igual</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>!strcmp(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>));</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_top,<sp/>v_top)<sp/>==<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd));</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a44fca0432c8da0e08c623edd76afa9b4" kindref="member">maior</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>strcmp(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd)<sp/>&gt;<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_top,<sp/>v_top));</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a00ba42de048a9f70b31d92dcd28f8594" kindref="member">menor</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>strcmp(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd)<sp/>&lt;<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_top,<sp/>v_top));</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a92b2a6049936bd24c5410fd1a541288d" kindref="member">invertevl</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>==<sp/>0)<sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t,<sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>*1.0;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>:<sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a56672f95bcd0c9bf1ec45dc942cd7385" kindref="member">econjuncao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_top,<sp/>v_top)<sp/>&amp;&amp;<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd))<sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a95619495de1c17828bc4da5686fd8fd2" kindref="member">edisjuncao</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd))<sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a57a716b637a8f163767ff908b3d7395e" kindref="member">emaior</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd)){</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_top,<sp/>v_top)<sp/>&gt;<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd))<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a68bb2456be4665bde8c6216d7416d46d" kindref="member">emenor</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd)){</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_top,<sp/>v_top)<sp/>&lt;<sp/><ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_snd,<sp/>v_snd))<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1abd2f3cb10e53d365dfed6bb55a84046c" kindref="member">ifthenelse</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_trd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_trd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(t_trd)){</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v_trd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;size<sp/>==<sp/>0)<sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_trd,<sp/>v_trd))<sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="operadores_8c_1a30590305d071041a944db7dc41c64f05" kindref="member">elemDouble</ref>(t_trd,<sp/>v_trd))<sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_snd,<sp/>v_snd);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a2b52c6822cc7f3f0bdf57e91d8137471" kindref="member">pushvar</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varstr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(strchr(varstr,<sp/>var)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s,<sp/>s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1ab54c9d07fbdb0abf73d6b0c4cbf9998f" kindref="member">type</ref>,<sp/>s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a919c7e29ea742c20ddfc86e10b57d744" kindref="member">copiatopo</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var){</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*varstr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(strchr(varstr,<sp/>var)<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1a6b7c0292afd2eebc26df67afb88b57c7" kindref="member">copy</ref>(s,<sp/>var);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a6b7c0292afd2eebc26df67afb88b57c7" kindref="member">copy</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>var){</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/>s-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[s-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>-<sp/>1].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_top){</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>):</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref><sp/>=<sp/>strdup(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>):</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref><sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref><sp/>(s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>,<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].<ref refid="structStackElem_1ab54c9d07fbdb0abf73d6b0c4cbf9998f" kindref="member">type</ref>,(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;p[i].valor<sp/>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref><sp/>=<sp/>v_top;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structStack_1afa6bf13f663f849621770edc7653f96f" kindref="member">vars</ref>[var-65].<ref refid="structStackElem_1ab54c9d07fbdb0abf73d6b0c4cbf9998f" kindref="member">type</ref><sp/>=<sp/>t_top;</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a728e28daeafd78ff8613b7abb0ae85a0" kindref="member">virgula</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_top)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>)<sp/>:</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref><sp/>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)strlen<sp/>(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>));</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>)<sp/>:<sp/></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref><sp/>=<sp/>v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>)<sp/>:<sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afb7825ebed9ad96348ee8588d84db633" kindref="member">Double</ref>)<sp/>:</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(long)v_top.<ref refid="unionelemdata_1a5a559641102f69ae74aa6dc6bf148e45" kindref="member">d</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>i);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1abf56cca59f9e3f0e1d78d65ac8f1fdb8" kindref="member">trsstring</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s){</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>*s<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>*(s+1)=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3acfb58d6af645eccb73eb44b32ad26e" kindref="member">concat_arrays</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);<sp/></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_tmp;<sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_tmp;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>,<sp/>i;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1ab7c77a9ab1c5488c65dababa98241055" kindref="member">isBothArray</ref>(t_top,<sp/>t_snd)){</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>=<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0<sp/>;i<sp/>&lt;<sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>;<sp/>i++){</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_tmp<sp/>=<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].type;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_tmp<sp/>=<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].valor;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref><sp/>(v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>,<sp/>t_tmp,<sp/>v_tmp);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref><sp/>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>v_snd);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(t_snd)){</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>,<sp/>t_top,<sp/>v_top);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>v_snd);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>=<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s_array,<sp/>t_snd,<sp/>v_snd);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_tmp<sp/>=<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].type;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_tmp<sp/>=<sp/>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].valor;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref>(s_array,<sp/>t_tmp,<sp/>v_tmp);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1af7afd6312bc83f0590fcff2a80bf7fc1" kindref="member">concat_strings</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(1000*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref><sp/>(t_top,<sp/>t_snd))</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>strcat<sp/>(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>));</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(t_top)){</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_snd<sp/>==<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref>){</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1abf56cca59f9e3f0e1d78d65ac8f1fdb8" kindref="member">trsstring</ref>(v_snd.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>strcat(aux,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1abf56cca59f9e3f0e1d78d65ac8f1fdb8" kindref="member">trsstring</ref>(v_top.<ref refid="unionelemdata_1a57aba5a4f1f9d784dc63e5a2f0ac22f9" kindref="member">c</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>strcat(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>aux));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a52f1c920ef9994bddd2f57b7f74ef3d6" kindref="member">concat</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a6379b1e68eb419242670b5d0153a76bb" kindref="member">isAnyArray</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a3acfb58d6af645eccb73eb44b32ad26e" kindref="member">concat_arrays</ref>(s);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a2b19c806ab2b8a56ce87875a4a41b082" kindref="member">isAnyString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1af7afd6312bc83f0590fcff2a80bf7fc1" kindref="member">concat_strings</ref>(s);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a17f75f7c1d176990256b2490e927bb3a" kindref="member">operador_mais</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a6379b1e68eb419242670b5d0153a76bb" kindref="member">isAnyArray</ref>(t_top,<sp/>t_snd)<sp/>||<sp/><ref refid="operadores_8c_1a2b19c806ab2b8a56ce87875a4a41b082" kindref="member">isAnyString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a52f1c920ef9994bddd2f57b7f74ef3d6" kindref="member">concat</ref>(s);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3771ae9af45733c322719ef939fcf566" kindref="member">soma</ref>(s);</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aa5bb8725a3146e64903bc1457c759c42" kindref="member">take_last</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(t_top))<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_arr<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_arr<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>v_top);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,t_arr,v_arr);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(strlen(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i+1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[0]<sp/>=<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3ddd42dca346ba1a2d95a938767af3a8" kindref="member">operador_pFechado</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(t_top)<sp/>||<sp/><ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(t_top))<sp/><ref refid="operadores_8c_1aa5bb8725a3146e64903bc1457c759c42" kindref="member">take_last</ref>(s);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3da097a9c94248db35377a229205d5d7" kindref="member">parentesesFechado</ref>(s);</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aa15c3fe091c136802ebf9142d1a869a5" kindref="member">take_fst</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(t_top))<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_n<sp/>=<sp/><ref refid="stack_8c_1a7dc6b9677324bf81d0a3c5a58deab75a" kindref="member">peekind2</ref>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_n<sp/>=<sp/><ref refid="stack_8c_1ae588df3811c978be997b155a71965867" kindref="member">pop_bottom</ref>(v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>v_top.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/>t_n<sp/>,<sp/>v_n);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(strlen(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[0]<sp/>=<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[0];</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i+1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i]<sp/>=<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i+1];</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ae9e503653973e0ff2a8a5fe204086e2c" kindref="member">operador_pAberto</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(t_top)<sp/>||<sp/><ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(t_top))<sp/><ref refid="operadores_8c_1aa15c3fe091c136802ebf9142d1a869a5" kindref="member">take_fst</ref>(s);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a5d37c34f7318feb0f0d5fb6e4a5a21e0" kindref="member">parentesesAberto</ref>(s);</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a5bee35b55a8a98e898a1209ec12e24b1" kindref="member">til</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>s_array<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_tmp;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_tmp;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>=<sp/>(s_array.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>,<sp/>i=0;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;i<sp/>&lt;<sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>;<sp/>i++){</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_tmp<sp/>=<sp/>(s_array.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].type;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_tmp<sp/>=<sp/>(s_array.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].valor;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref><sp/>(s,<sp/>t_tmp,<sp/>v_tmp);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ab1ca19c9cfca13b6154795774515a685" kindref="member">operador_til</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(<ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s))){</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1a5bee35b55a8a98e898a1209ec12e24b1" kindref="member">til</ref>(s);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1a452b559406b24eb5e0bad8a7ebb75689" kindref="member">not</ref>(s);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a9b6d42d712bd87e546a4d6443cf6c56a" kindref="member">procura_substr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sup<sp/>=<sp/>strstr(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>r=-1;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sup)<sp/></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,sup<sp/>-<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44afbe5087b942deaaa3202c7ca87dbc327" kindref="member">Long</ref>,<sp/>r);</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ad8cfb2a4efd7a48b443d0676cb09457c" kindref="member">operador_cardinal</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(<ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s))){</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1a9b6d42d712bd87e546a4d6443cf6c56a" kindref="member">procura_substr</ref>(s);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="operadores_8c_1aff383c03881eb0407ce934e8c33adb1c" kindref="member">exponenciacao</ref>(s);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a7e512a8653e38e8bf2605865e3388558" kindref="member">lermtlinhas</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*y<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(10000<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(10000<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(x,<sp/>10000,<sp/>stdin)){</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(y,x);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>y);</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a64c42d9e0f2efda6df0689b2bfe97b0a" kindref="member">procura_por_indice</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref><sp/>(t_snd))</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref><sp/>(s,<sp/>(v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;p[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].type,<sp/>(v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;p[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].valor);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44adf35c44092249df12865ec3ca08eb000" kindref="member">Char</ref><sp/>,<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>]);</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ab56dfd4d71f552575a47d3153aee03f0" kindref="member">operador_igual</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a8f1f8db494502485256e7afe1827b698" kindref="member">igual</ref>(s);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(<ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,1))<sp/>||<sp/><ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(<ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,1)))<sp/><ref refid="operadores_8c_1a64c42d9e0f2efda6df0689b2bfe97b0a" kindref="member">procura_por_indice</ref>(s);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a8f1f8db494502485256e7afe1827b698" kindref="member">igual</ref>(s);</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a3685206f30bdc1c0bade8be43d4717e6" kindref="member">concat_xvezes</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_rep<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_rep<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(t_rep)){</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc<sp/>(strlen(v_rep.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>;<sp/>i++)<sp/>strcat(aux,<sp/>v_rep.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>aux);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>;<sp/>j++){</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_tmp;<sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_tmp;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>,<sp/>i;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>=<sp/>(v_rep.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/><ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>;<sp/>i++){</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_tmp<sp/>=<sp/>(v_rep.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].type;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_tmp<sp/>=<sp/>(v_rep.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>)-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[i].valor;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a02ff6e9ee40167f0274839a464eb704c" kindref="member">pushaux</ref><sp/>(s_array,<sp/>t_tmp,<sp/>v_tmp);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aa759f27f5ba1d908b146ea0fc0ac2a78" kindref="member">operador_asterisco</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1a6379b1e68eb419242670b5d0153a76bb" kindref="member">isAnyArray</ref>(t_top,<sp/>t_snd)<sp/>||<sp/><ref refid="operadores_8c_1a2b19c806ab2b8a56ce87875a4a41b082" kindref="member">isAnyString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a3685206f30bdc1c0bade8be43d4717e6" kindref="member">concat_xvezes</ref>(s);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1aaf5ce3a099e3a41b4bcedc753d47d8fc" kindref="member">mult</ref>(s);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a6d303d615486f011f9b1e5e191512833" kindref="member">sepstr_substr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((token<sp/>=<sp/>strtok_r(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/>&amp;v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>))){<sp/></highlight><highlight class="comment">//separa<sp/>a<sp/>string<sp/>da<sp/>substring<sp/>e<sp/>guarda<sp/>no<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>token);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a076d88e40e29e20954d90fd3ca48fc75" kindref="member">operador_barra</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a6d303d615486f011f9b1e5e191512833" kindref="member">sepstr_substr</ref>(s);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a103b13816055f2f65f846c32605aa129" kindref="member">divisao</ref>(s);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a73991313de0e39d2503779617d9c7b0b" kindref="member">sepstr_whitespc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((token<sp/>=<sp/>strtok_r(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t\n&quot;</highlight><highlight class="normal">,<sp/>&amp;v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>))){<sp/></highlight><highlight class="comment">//separa<sp/>a<sp/>string<sp/>e<sp/>guarda<sp/>no<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>token);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1af8ee9f99ed680a12412bf856d8fb1159" kindref="member">sepstr_newlns</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((token<sp/>=<sp/>strtok_r(v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>&amp;v_top.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>))){<sp/></highlight><highlight class="comment">//separa<sp/>a<sp/>string<sp/>e<sp/>guarda<sp/>no<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>token);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1ac2bc84393637b80e017dbb221e135727" kindref="member">buscaInicio</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(strlen(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_snd)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>)<sp/>:</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>){</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/><ref refid="stack_8c_1a7dc6b9677324bf81d0a3c5a58deab75a" kindref="member">peekind2</ref>(v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>,<sp/>0),<sp/><ref refid="stack_8c_1ae588df3811c978be997b155a71965867" kindref="member">pop_bottom</ref>(v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>)--;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>)<sp/>:</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[i]<sp/>=<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i];</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;<sp/><sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>--;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>aux);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a8ce6283f3d492fd2b5b458c06e8f37b8" kindref="member">operador_menor</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a00ba42de048a9f70b31d92dcd28f8594" kindref="member">menor</ref>(s);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(<ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,1))<sp/>||<sp/><ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(<ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,1)))<sp/><ref refid="operadores_8c_1ac2bc84393637b80e017dbb221e135727" kindref="member">buscaInicio</ref>(s);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a00ba42de048a9f70b31d92dcd28f8594" kindref="member">menor</ref>(s);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a201d8d8ca1094bd80b880c4e50385f77" kindref="member">buscaFim</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_top<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionelemdata" kindref="compound">elemdata</ref><sp/>v_snd<sp/>=<sp/><ref refid="stack_8c_1a450385e20b5ac2cae78d168fc0f6343a" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s_array<sp/>=<sp/><ref refid="stack_8c_1ababc8c59acfae77cbd28d8f17103cfb0" kindref="member">criar_stack</ref>();</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>malloc(strlen(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t_snd)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>)<sp/>:</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s_array,<sp/>v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>-<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].<ref refid="structStackElem_1ab54c9d07fbdb0abf73d6b0c4cbf9998f" kindref="member">type</ref>,<sp/>v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>-&gt;<ref refid="structStack_1ad8f5335a3114718423c00ba1d874f30d" kindref="member">p</ref>[v_snd.<ref refid="unionelemdata_1ab01a6d6a52c693602cfc22f185851383" kindref="member">arr</ref>-&gt;<ref refid="structStack_1a7b167082a4c6b68566501eaa2423cb3d" kindref="member">size</ref><sp/>-<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>].<ref refid="structStackElem_1a3d93198a8582978fd2164269d2fd730e" kindref="member">valor</ref>);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>)--;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44af8303e03242532eebd970f40ee509689" kindref="member">Array</ref>,<sp/>s_array);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>)<sp/>:</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>strlen(v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>)<sp/>-<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[z]<sp/>=<sp/>v_snd.<ref refid="unionelemdata_1a15c16f8f4294147216a15cd369bba5d1" kindref="member">str</ref>[i];</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z++;<sp/>i++;<sp/>v_top.<ref refid="unionelemdata_1a4ff579ae5f7317e0462c44a8d874087b" kindref="member">l</ref>--;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux[z]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a89f6b80914b5fee206c434ab3d736713" kindref="member">push</ref>(s,<ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44ade17ec82ff106e0c2b4417f5ca231eae" kindref="member">String</ref>,<sp/>aux);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a0ca13a586172e028c332b8caf9b9aa63" kindref="member">operador_maior</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structStack" kindref="compound">Stack</ref><sp/>*s){</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_top<sp/>=<sp/><ref refid="stack_8c_1a41357e76f345cefeb2e3b5bacf8c8f4b" kindref="member">peek</ref>(s);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a299c4209e8a53e5a64af604da1921c44" kindref="member">elemtype</ref><sp/>t_snd<sp/>=<sp/><ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,<sp/>1);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="operadores_8c_1afb5e1520c8faa97a2f0c034abde4a021" kindref="member">isBothString</ref>(t_top,<sp/>t_snd))<sp/><ref refid="operadores_8c_1a44fca0432c8da0e08c623edd76afa9b4" kindref="member">maior</ref>(s);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(<ref refid="operadores_8c_1a3659a31d5a992a6117cbbefed6e5c0d5" kindref="member">isArray</ref>(<ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,1))<sp/>||<sp/><ref refid="operadores_8c_1afc94089887ed536a3f2b1a51ae96b59e" kindref="member">isString</ref>(<ref refid="stack_8c_1aabb6f19157351652cf43e3028e9666b2" kindref="member">peekind</ref>(s,1)))<sp/><ref refid="operadores_8c_1a201d8d8ca1094bd80b880c4e50385f77" kindref="member">buscaFim</ref>(s);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="operadores_8c_1a44fca0432c8da0e08c623edd76afa9b4" kindref="member">maior</ref>(s);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="operadores.c"/>
  </compounddef>
</doxygen>
